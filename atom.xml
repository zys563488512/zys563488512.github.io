<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JayZhang Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zys563488512.github.io/"/>
  <updated>2017-07-25T07:57:31.000Z</updated>
  <id>https://zys563488512.github.io/</id>
  
  <author>
    <name>zys</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React-native 学习</title>
    <link href="https://zys563488512.github.io/2017/07/09/Lesson_01/"/>
    <id>https://zys563488512.github.io/2017/07/09/Lesson_01/</id>
    <published>2017-07-09T04:22:30.000Z</published>
    <updated>2017-07-25T07:57:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>###part_01:Props(属性)<br>大多数组件在创建时就可以使用各种参数来进行定制。用于定制这些参数就称为props(属性)。</p>
<p>以常见的基础组件Image为例，在创建一个图片时，可以传入一个名为source的prop来制定要显示图片的地址，以及使用名为style的prop来控制其尺寸。</p>
<p>#####eg: Image<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">import React, &#123;</div><div class="line">  AppRegistry,</div><div class="line">  Component,</div><div class="line">  Image,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; from &apos;react-native&apos;</div><div class="line"></div><div class="line">class Project extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    let pic = &#123;</div><div class="line">      uri: &apos;https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg&apos;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    return (</div><div class="line">      </div><div class="line">      &lt;Image source=&#123;pic&#125; style=&#123;&#123;width: 193, height: 110&#125;&#125; /&gt; </div><div class="line">⚠️注意: return下不能同时存在俩个视图控件，否则会报错</div><div class="line">//       &lt;Image </div><div class="line">//         style=&#123;&#123;</div><div class="line">//           width: 300,</div><div class="line">//           height: 200,</div><div class="line">//         &#125;&#125;</div><div class="line">//         source=&#123;&#123;uri: &apos;https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg&apos;&#125;&#125;</div><div class="line">//         /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent(&apos;Project&apos;, () =&gt; Project);</div></pre></td></tr></table></figure></p>
<p>⚠️注意: {pic}外围有一层括号，我们需要用括号来吧pic这个变量嵌入到JSX语句中。括号的意思是括号内部为一个js变量或表达式，需要执行后取值。因此我们可以把任何合法的JavaScript表达式通过括号嵌入到JSX语句中。</p>
<p>#####eg:this.props<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">import React, &#123;</div><div class="line">  AppRegistry,</div><div class="line">  Component,</div><div class="line">  Image,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; from &apos;react-native&apos;</div><div class="line">class LotsOfGreetings extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;Text&gt; Hello &#123;this.props.name&#125;! &lt;/Text&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">class Project extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;&#123;alignItems: &apos;center&apos;&#125;&#125;&gt;</div><div class="line">        &lt;LotsOfGreetings name=&apos;Rexxar&apos; /&gt;</div><div class="line">        &lt;LotsOfGreetings name=&apos;Jaina&apos; /&gt;</div><div class="line">        &lt;LotsOfGreetings name=&apos;Valeera&apos; /&gt;</div><div class="line">        &lt;Image source=&#123;pic&#125; style=&#123;&#123;width: 193, height: 110&#125;&#125; /&gt; </div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent(&apos;Project&apos;, () =&gt; Project);</div></pre></td></tr></table></figure></p>
<p>在LotsOfGreetings组建中将name作为一个属性来定制，这样可以复用这一组建来制作各种不同的“问候语”。上面的例子把LotsOfGreetings组件写在JSX语句中，用法和内置组建并无二致。可以用此方法搭建一套自己的基础UI框架。</p>
<p>###part_02:State(状态)<br>我们使用两种数据来控制一个组件: props和 state。<br>props是在父组件中指定，而且一经指定，在被指定的组件的生命周期中则不再改变。对于需要改变的数据，我们需要使用state。</p>
<p>一般来说，你需要在constructor(构造函数)中初始化state，然后在需要修改的是调用setState方法。</p>
<p>#####eg:假如制作一段不停闪烁的文字。文字内容本身在组件创建时就已经指定好了，所以文字内容应该是一个prop。而文字的显示或隐藏的状态则是随着时间变化的，因此这一状态应该是state。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">import React, &#123;</div><div class="line">  AppRegistry,</div><div class="line">  Component,</div><div class="line">  Image,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; from &apos;react-native&apos;</div><div class="line">class Blink extends Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.state = &#123;showText: true&#125;;</div><div class="line">    //每1000毫秒对showText状态做一次取反操作</div><div class="line">    setInterval(() =&gt; &#123;</div><div class="line">      this.setState(previousState =&gt; &#123;</div><div class="line">        return &#123;showText: !previousState.showText&#125;;</div><div class="line">      &#125;);</div><div class="line">    &#125;,1000);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    //根据当前showText的值决定是否显示text内容</div><div class="line">    let display = this.state.showText ? this.props.text : &apos; &apos;;</div><div class="line">    return (</div><div class="line">      &lt;Text&gt;&#123;display&#125;&lt;/Text&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">class Project extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View&gt;</div><div class="line">        &lt;Blink text=&apos;I love to blink&apos; /&gt;</div><div class="line">        &lt;Blink text=&apos;什么鬼啊，蛇精病啊！&apos; /&gt;</div><div class="line">        &lt;Blink text=&apos;什么鬼，全是英文!&apos; /&gt;</div><div class="line">        &lt;Blink text=&apos;想是什么鬼就是什么鬼！&apos; /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent(&apos;Project&apos;, () =&gt; Project);</div></pre></td></tr></table></figure>
<p>实际开发中，一般不会在定时器函数(setInterval、setTimeout等)中来操作state。典型的场景是在接收到服务器返回的新数据，或是用户输入数据后。可以使用一些“状态容器”，比如Redux来统一管理数据流。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###part_01:Props(属性)&lt;br&gt;大多数组件在创建时就可以使用各种参数来进行定制。用于定制这些参数就称为props(属性)。&lt;/p&gt;
&lt;p&gt;以常见的基础组件Image为例，在创建一个图片时，可以传入一个名为source的prop来制定要显示图片的地址，以及使用
    
    </summary>
    
    
  </entry>
  
</feed>
