<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JayZhang Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zys563488512.github.io/"/>
  <updated>2017-07-25T09:23:07.000Z</updated>
  <id>https://zys563488512.github.io/</id>
  
  <author>
    <name>zys</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React Native</title>
    <link href="https://zys563488512.github.io/2017/07/09/Lesson_01/"/>
    <id>https://zys563488512.github.io/2017/07/09/Lesson_01/</id>
    <published>2017-07-09T04:22:30.000Z</published>
    <updated>2017-07-25T09:23:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://reactnative.cn/docs/0.46/getting-started.html#content" title="Title" target="_blank" rel="external"><br>React Native 搭建开发环境</a></p>

<font color="#000000" size="4" face="黑体">part_01:Props(属性)</font>

<p>大多数组件在创建时就可以使用各种参数来进行定制。用于定制这些参数就称为<font color="#DC143C">props</font>(属性)。</p>
<p>以常见的基础组件<font color="#DC143C"> Image </font>为例，在创建一个图片时，可以传入一个名为<font color="#DC143C"> source </font>的<font color="#DC143C"> prop </font>来制定要显示图片的地址，以及使用名为<font color="#DC143C"> style </font>的<font color="#DC143C"> prop </font>来控制其尺寸。</p>
<font color="#0000FF" size="3"> eg: Image </font>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">import React, &#123;</div><div class="line">  AppRegistry,</div><div class="line">  Component,</div><div class="line">  Image,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; from &apos;react-native&apos;</div><div class="line"></div><div class="line">class Project extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    let pic = &#123;</div><div class="line">      uri: &apos;https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg&apos;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    return (</div><div class="line">      </div><div class="line">      &lt;Image source=&#123;pic&#125; style=&#123;&#123;width: 193, height: 110&#125;&#125; /&gt; </div><div class="line">⚠️注意: return下不能同时存在俩个视图控件，否则会报错</div><div class="line">//       &lt;Image </div><div class="line">//         style=&#123;&#123;</div><div class="line">//           width: 300,</div><div class="line">//           height: 200,</div><div class="line">//         &#125;&#125;</div><div class="line">//         source=&#123;&#123;uri: &apos;https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg&apos;&#125;&#125;</div><div class="line">//         /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent(&apos;Project&apos;, () =&gt; Project);</div></pre></td></tr></table></figure>
<p>⚠️注意: <font color="#DC143C">{pic}</font>外围有一层括号，我们需要用括号来吧pic这个变量嵌入到JSX语句中。括号的意思是括号内部为一个js变量或表达式，需要执行后取值。因此我们可以把任何合法的JavaScript表达式通过括号嵌入到JSX语句中。</p>
<font color="#0000FF" size="3"> eg:this.props </font>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">import React, &#123;</div><div class="line">  AppRegistry,</div><div class="line">  Component,</div><div class="line">  Image,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; from &apos;react-native&apos;</div><div class="line">class LotsOfGreetings extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;Text&gt; Hello &#123;this.props.name&#125;! &lt;/Text&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">class Project extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;&#123;alignItems: &apos;center&apos;&#125;&#125;&gt;</div><div class="line">        &lt;LotsOfGreetings name=&apos;Rexxar&apos; /&gt;</div><div class="line">        &lt;LotsOfGreetings name=&apos;Jaina&apos; /&gt;</div><div class="line">        &lt;LotsOfGreetings name=&apos;Valeera&apos; /&gt;</div><div class="line">        &lt;Image source=&#123;pic&#125; style=&#123;&#123;width: 193, height: 110&#125;&#125; /&gt; </div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent(&apos;Project&apos;, () =&gt; Project);</div></pre></td></tr></table></figure>
<p>在LotsOfGreetings组建中将<font color="#DC143C">name</font>作为一个属性来定制，这样可以复用这一组建来制作各种不同的“问候语”。上面的例子把LotsOfGreetings组件写在JSX语句中，用法和内置组建并无二致。可以用此方法搭建一套自己的基础UI框架。</p>
<font color="#000000" size="4" face="黑体">part_02:State(状态)(属性)</font>

<p>我们使用两种数据来控制一个组件: <font color="#DC143C">props</font>和 <font color="#DC143C">state</font>。</p>
<font color="#DC143C">props</font>是在父组件中指定，而且一经指定，在被指定的组件的生命周期中则不再改变。对于需要改变的数据，我们需要使用<font color="#DC143C">state</font>。<br><br>一般来说，你需要在constructor(构造函数)中初始化<font color="#DC143C">state</font>，然后在需要修改的是调用<font color="#DC143C">setState</font>方法。<br><br><font color="#0000FF" size="3">eg:假如制作一段不停闪烁的文字。文字内容本身在组件创建时就已经指定好了，所以文字内容应该是一个prop。而文字的显示或隐藏的状态则是随着时间变化的，因此这一状态应该是<font color="#DC143C">state</font>。</font>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">import React, &#123;</div><div class="line">  AppRegistry,</div><div class="line">  Component,</div><div class="line">  Image,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; from &apos;react-native&apos;</div><div class="line">class Blink extends Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.state = &#123;showText: true&#125;;</div><div class="line">    //每1000毫秒对showText状态做一次取反操作</div><div class="line">    setInterval(() =&gt; &#123;</div><div class="line">      this.setState(previousState =&gt; &#123;</div><div class="line">        return &#123;showText: !previousState.showText&#125;;</div><div class="line">      &#125;);</div><div class="line">    &#125;,1000);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    //根据当前showText的值决定是否显示text内容</div><div class="line">    let display = this.state.showText ? this.props.text : &apos; &apos;;</div><div class="line">    return (</div><div class="line">      &lt;Text&gt;&#123;display&#125;&lt;/Text&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">class Project extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View&gt;</div><div class="line">        &lt;Blink text=&apos;I love to blink&apos; /&gt;</div><div class="line">        &lt;Blink text=&apos;什么鬼啊，蛇精病啊！&apos; /&gt;</div><div class="line">        &lt;Blink text=&apos;什么鬼，全是英文!&apos; /&gt;</div><div class="line">        &lt;Blink text=&apos;想是什么鬼就是什么鬼！&apos; /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent(&apos;Project&apos;, () =&gt; Project);</div></pre></td></tr></table></figure>
<p>实际开发中，一般不会在定时器函数(<font color="#DC143C">setInterval</font>、<font color="#DC143C">setTimeout</font>等)中来操作state。典型的场景是在接收到服务器返回的新数据，或是用户输入数据后。可以使用一些“状态容器”，比如<font color="#DC143C">Redux</font>来统一管理数据流。</p>
<p><a href="https://facebook.github.io/react/docs/react-commponent.html" title="Title" target="_blank" rel="external"><br>更深层次参考地址</a></p>

<font color="#000000" size="4" face="黑体">part_03:样式</font>

<p>在React Native 中，仍然使用JavaScript来写样式,所有的核心组件都接受名为style的属性。这些样式名基本上是遵循了web上的CSS的命名，只是按照JS的语法要求使用了驼峰命名法，例如：<font color="#DC143C">background-color</font>改为<font color="#DC143C">backgroundColor</font>。</p>
<font color="#DC143C">style</font>属性可以是一个普通的JavaScript对象。可以使用一个数组在数组中为之巨厚的样式对象比居前的优先级更高，这样可以间接实现样式的继承。<br><br>实际开发组件的样式会越来越复杂，建议使用<font color="#DC143C">StyleSheet.create</font> 来几种定义组件的样式。<br><br><font color="#0000FF" size="3"> eg: </font>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">import React, &#123;</div><div class="line">  AppRegistry,</div><div class="line">  Component,</div><div class="line">  Image,</div><div class="line">  Text,</div><div class="line">  StyleSheet,</div><div class="line">  View</div><div class="line">&#125; from &apos;react-native&apos;</div><div class="line">class Project extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View&gt;</div><div class="line">        &lt;Text style=&#123;styles.red&#125;&gt;什么鬼&lt;/Text&gt;</div><div class="line">        &lt;Text style=&#123;styles.bigblue&#125;&gt;深井冰啊&lt;/Text&gt;</div><div class="line">        &lt;Text style=&#123;[styles.bigblue, styles.red]&#125;&gt;什么鬼,深井冰啊&lt;/Text&gt;</div><div class="line">        &lt;Text style=&#123;[styles.red,styles.bigblue]&#125;&gt;深井冰啊,什么鬼&lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">const styles = StyleSheet.create (&#123;</div><div class="line">  bigblue: &#123;</div><div class="line">    color: &apos;blue&apos;,</div><div class="line">    fontWeight: &apos;bold&apos;,</div><div class="line">    fontSize: 30,</div><div class="line">  &#125;,       </div><div class="line">  red: &#123;</div><div class="line">    color: &apos;red&apos;,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(&apos;Project&apos;, () =&gt; Project);</div></pre></td></tr></table></figure>
<p>在以上代码中会看到(后声明的属性会覆盖先声明的同名属性)</p>
<p><a href="http://reactnative.cn/docs/0.46/text.html#content" title="Title" target="_blank" rel="external"><br>Text组件的文档</a></p>

<font color="#000000" size="4" face="黑体">part_03:高度与宽度</font>

<p>组件的高度和宽度决定了其在屏幕上显示的尺寸</p>
<font color="#0000FF" size="3"> eg:指定宽高 </font>

<p>最简单的给组件设定尺寸的方式就是在样式中指定固定的<font color="#DC143C">width</font>和<font color="#DC143C">height</font>。React Native中的尺寸都是无单位的，表示的是与设备像素密度无关的逻辑像素点。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">import React, &#123;</div><div class="line">  AppRegistry,</div><div class="line">  Component,</div><div class="line">  Image,</div><div class="line">  Text,</div><div class="line">  StyleSheet,</div><div class="line">  View</div><div class="line">&#125; from &apos;react-native&apos;</div><div class="line">class Project extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View&gt;</div><div class="line">        &lt;View style=&#123;&#123;width: 50, height: 50, backgroundColor: &apos;powderblue&apos;&#125;&#125; /&gt;</div><div class="line">        &lt;View style=&#123;&#123;width: 100, height: 100, backgroundColor: &apos;skyblue&apos;&#125;&#125; /&gt;</div><div class="line">        &lt;View style=&#123;&#123;width: 150, height: 150, backgroundColor: &apos;steelblue&apos;&#125;&#125; /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">// 注册应用(registerComponent)后才能正确渲染</div><div class="line">// 注意: 只把应用作为一个整体注册一次，而不是每个组件/模块都注册</div><div class="line">AppRegistry.registerComponent(&apos;Project&apos;, () =&gt; Project);</div></pre></td></tr></table></figure>
<font color="#0000FF" size="3"> eg:弹性(Flex)宽高</font>

<p>在组件样式中使用Flex可以使其在可利用的空间中动态的扩张或收缩。一般会使用</p>
<font color="#DC143C">flex:1</font>来指定某个组件扩张以撑满所有剩余的空间。如果有多个并列的子组件使用了<font color="#DC143C">flex:1</font>,则这些字组件会平分父容器中剩余的空间。如果这些并列的子组件的<font color="#DC143C">flex</font>值不一样，则谁的值更大，谁占据剩余空间的比例就更大<br><br><em style="color:#FF1493; text-align:center; background-color:#FFB6C1">组件能够撑满剩余空间的前提是父容器的尺寸不为零。如果父容器没有固定的width和height，也没有设定flex，则父容器的尺寸为零。其字组件如果使用了flex，也是无法显示的</em><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">import React, &#123;</div><div class="line">  AppRegistry,</div><div class="line">  Component,</div><div class="line">  Image,</div><div class="line">  Text,</div><div class="line">  StyleSheet,</div><div class="line">  View</div><div class="line">&#125; from &apos;react-native&apos;</div><div class="line">class Project extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      //去掉父view中的‘flex:1’。</div><div class="line">      //则父view不再具有尺寸，因此子组件也无法再撑开。</div><div class="line">      //然后再尝试用 ‘height: 300’ 来替换父view的‘flex:1’</div><div class="line">      &lt;View style=&#123;&#123;flex:1&#125;&#125;&gt;</div><div class="line">        &lt;View style=&#123;&#123;flex:1, backgroundColor: &apos;powderblue&apos;&#125;&#125; /&gt;</div><div class="line">        &lt;View style=&#123;&#123;flex:2, backgroundColor: &apos;skyblue&apos;&#125;&#125; /&gt;</div><div class="line">        &lt;View style=&#123;&#123;flex:3, backgroundColor: &apos;steelblue&apos;&#125;&#125; /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">// 注册应用(registerComponent)后才能正确渲染</div><div class="line">// 注意: 只把应用作为一个整体注册一次，而不是每个组件/模块都注册</div><div class="line">AppRegistry.registerComponent(&apos;Project&apos;, () =&gt; Project);</div></pre></td></tr></table></figure><br><br><font color="#000000" size="4" face="黑体">part_04:使用Flexbox布局</font>

]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://reactnative.cn/docs/0.46/getting-started.html#content&quot; title=&quot;Title&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;br&gt;React Native 搭建开发
    
    </summary>
    
    
  </entry>
  
</feed>
