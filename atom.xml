<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jay Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zys563488512.github.io/"/>
  <updated>2017-07-09T06:53:54.000Z</updated>
  <id>https://zys563488512.github.io/</id>
  
  <author>
    <name>zys</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Swift3.0学习</title>
    <link href="https://zys563488512.github.io/2017/07/09/Lesson_01/"/>
    <id>https://zys563488512.github.io/2017/07/09/Lesson_01/</id>
    <published>2017-07-09T04:22:30.000Z</published>
    <updated>2017-07-09T06:53:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>####part_01:关于 Swift</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">part_01:关于 Swift（About Swift）</div><div class="line"></div><div class="line">	Swift 是一种新的编程语言，用于编写 iOS，macOS，watchOS 和 tvOS 的应用程序。Swift 结合了 C 和 Objective-C 的优点并且不受 C 兼容性的限制。Swift 采用安全的编程模式并添加了很多新特性，这将使编程更简单，更灵活，也更有趣。Swift 是基于成熟而且倍受喜爱的 Cocoa 和 Cocoa Touch 框架，它的降临将重新定义软件开发。</div><div class="line"></div><div class="line">	Swift 的开发从很久之前就开始了。为了给 Swift 打好基础，苹果公司改进了编译器，调试器和框架结构。我们使用自动引用计数（Automatic Reference Counting, ARC）来简化内存管理。我们在 Foundation 和 Cocoa 的基础上构建框架栈使其完全现代化和标准化。 Objective-C 本身支持块、集合语法和模块，所以框架可以轻松支持现代编程语言技术。正是得益于这些基础工作，我们现在才能发布这样一个用于未来苹果软件开发的新语言。</div><div class="line"></div><div class="line">	Objective-C 开发者对 Swift 并不会感到陌生。它采用了 	Objective-C 的命名参数以及动态对象模型，可以无缝对接到现有的 Cocoa 框架，并且可以兼容 Objective-C 代码。在此基础之上，Swift 还有许多新特性并且支持过程式编程和面向对象编程。</div><div class="line"></div><div class="line">	Swift 对于初学者来说也很友好。它是第一个既满足工业标准又像脚本语言一样充满表现力和趣味的系统编程语言。它支持代码预览(playgrounds)，这个革命性的特性可以允许程序员在不编译和运行应用程序的前提下运行 Swift 代码并实时查看结果。</div><div class="line"></div><div class="line">	Swift 将现代编程语言的精华和苹果工程师文化的智慧结合了起来。编译器对性能进行了优化，编程语言对开发进行了优化，两者互不干扰，鱼与熊掌兼得。Swift 既可以用于开发 “hello, world” 这样的小程序，也可以用于开发一套完整的操作系统。所有的这些特性让 Swift 对于开发者和苹果来说都是一项值得的投资。</div></pre></td></tr></table></figure>
<p>####part_02:基础部分</p>
<p>###常量和变量</p>
<p>常量和变量把一个名字（比如 maximumNumberOfLoginAttempts 或者 welcomeMessage ）和一个指定类型的值（比如数字 10 或者字符串 “Hello” ）关联起来。常量的值一旦设定就不能改变，而变量的值可以随意更改。</p>
<p>声明常量和变量</p>
<p>常量和变量必须在使用前声明，用 let 来声明常量，用 var 来声明变量。下面的例子展示了如何用常量和变量来记录用户尝试登录的次数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let maximumNumberOfLoginAttempts = 10</div><div class="line">var currentLoginAttempt = 0</div></pre></td></tr></table></figure>
<p>这两行代码可以被理解为：</p>
<p>“声明一个名字是 maximumNumberOfLoginAttempts 的新常量，并给它一个值 10 。然后，声明一个名字是 currentLoginAttempt 的变量并将它的值初始化为 0 。”</p>
<p>在这个例子中，允许的最大尝试登录次数被声明为一个常量，因为这个值不会改变。当前尝试登录次数被声明为一个变量，因为每次尝试登录失败的时候都需要增加这个值。</p>
<p>你可以在一行中声明多个常量或者多个变量，用逗号隔开：</p>
<pre><code>var x = 0.0, y = 0.0, z = 0.0
</code></pre><p>注意：</p>
<p>如果你的代码中有不需要改变的值，请使用 let 关键字将它声明为常量。只将需要改变的值声明为变量。</p>
<p>###类型标注</p>
<p>当你声明常量或者变量的时候可以加上类型标注（type annotation），说明常量或者变量中要存储的值的类型。如果要添加类型标注，需要在常量或者变量名后面加上一个冒号和空格，然后加上类型名称。</p>
<p>这个例子给 welcomeMessage 变量添加了类型标注，表示这个变量可以存储 String 类型的值：</p>
<pre><code>var welcomeMessage: String
</code></pre><hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####part_01:关于 Swift&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zys563488512.github.io/2017/07/09/SUMMARY/"/>
    <id>https://zys563488512.github.io/2017/07/09/SUMMARY/</id>
    <published>2017-07-09T04:22:30.000Z</published>
    <updated>2017-07-09T06:41:22.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>个人学习总结</title>
    <link href="https://zys563488512.github.io/2017/07/09/hello-world/"/>
    <id>https://zys563488512.github.io/2017/07/09/hello-world/</id>
    <published>2017-07-09T02:46:56.000Z</published>
    <updated>2017-07-09T06:43:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到我的小屋！！！</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎来到我的小屋！！！&lt;/p&gt;
&lt;hr&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
